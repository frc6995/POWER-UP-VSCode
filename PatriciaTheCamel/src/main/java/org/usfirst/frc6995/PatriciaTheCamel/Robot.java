// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

//
package org.usfirst.frc6995.PatriciaTheCamel;

import org.usfirst.frc6995.PatriciaTheCamel.commands.BasicAuto;
import org.usfirst.frc6995.PatriciaTheCamel.subsystems.Drivebase;
import org.usfirst.frc6995.PatriciaTheCamel.subsystems.Grabber;
import org.usfirst.frc6995.PatriciaTheCamel.subsystems.Intake;
import org.usfirst.frc6995.PatriciaTheCamel.subsystems.Lifter;
import org.usfirst.frc6995.PatriciaTheCamel.subsystems.Navigation;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    //LifterCom lifterComEncoder;
    
    SendableChooser<Command> chooser = new SendableChooser<>();
    
    
    public static double lifterSpeedUp;
    public static boolean intakeDeployed;
    public static double lifterSpeedDown;
    public static double autoDistance;
    
    BasicAuto basicAuto;
    
    public static OI oi;
    public static Grabber grabber;
    //public static Conveyor conveyor;
    public static Intake intake;
    public static Lifter lifter;
    public static Drivebase drivebase;
    public static Navigation navigation;

    /**
     * This function is run when the robot is first started up and should mainly be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        
        lifterSpeedUp = .75; //prefs.getDouble("lifterSpeedUp", .6);
    	lifterSpeedDown = -.1;//prefs.getDouble("lifterSpeedDown", -.3);
    	autoDistance = -10;//prefs.getDouble("autoDistance", -120);
    	
        grabber = new Grabber();
        intake = new Intake();
        //conveyor = new Conveyor();
        lifter = new Lifter();
        drivebase = new Drivebase();
        navigation = new Navigation();
        CameraServer.getInstance().startAutomaticCapture();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
//        rotatorCom = new RotatorCom();
        // Add commands to Autonomous Sendable Chooser
       
        chooser.addDefault("Autonomous Command", new BasicAuto());

        SmartDashboard.putData("Auto mode", chooser);
    }
    @Override
    public void robotPeriodic() {
        super.robotPeriodic();
        

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        //GrabRelease.initMech();
//        basicAuto = (BasicAuto) chooser.getSelected();
        basicAuto = new BasicAuto();
        // schedule the autonomous command (example)
        if (basicAuto != null) basicAuto.start();
        drivebase.resetEncoder();
        
        
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Yaw", navigation.getYaw());
        SmartDashboard.putNumber("rotateRate", drivebase.rotateRate);
    }

    @Override
    public void teleopInit() {
        //GrabRelease.initMech();
       // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (basicAuto != null) basicAuto.cancel();
        oi.lifterComPercentage.start();
        drivebase.resetEncoder();
        navigation.resetYaw();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
    	
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Yaw", navigation.getYaw());
        SmartDashboard.putNumber("rotateRate", drivebase.rotateRate);
    }
}
